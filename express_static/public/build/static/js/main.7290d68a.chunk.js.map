{"version":3,"sources":["components/Button.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Button","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","click","bind","assertThisInitialized","console","log","props","onClick","react_default","a","createElement","className","children","React","Component","Card","src","info","flag","name","capital","population","region","App","buttonClick","buttonSearch","inputChange","state","search","error","_this2","fetch","then","res","json","setState","catch","err","country","_this3","concat","_this4","e","target","value","type","onChange","components_Button","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAqBeA,iCAlBX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQP,EAAKO,MAAMC,KAAXP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFHA,uEAMVU,QAAQC,IAAI,kBAEZR,KAAKS,MAAMC,2CAIX,OACIC,EAAAC,EAAAC,cAAA,UAAQH,QAASV,KAAKI,MAAOU,UAAU,mBAAmBd,KAAKS,MAAMM,iBAd5DC,IAAMC,YCgBZC,mLAbP,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeK,IAAKnB,KAAKS,MAAMW,KAAKC,OACnDV,EAAAC,EAAAC,cAAA,aAAKb,KAAKS,MAAMW,KAAKE,KAArB,KACAX,EAAAC,EAAAC,cAAA,aAAKb,KAAKS,MAAMW,KAAKG,QAArB,KACAZ,EAAAC,EAAAC,cAAA,aAAKb,KAAKS,MAAMW,KAAKI,WAArB,KACAb,EAAAC,EAAAC,cAAA,aAAKb,KAAKS,MAAMW,KAAKK,OAArB,aATGT,IAAMC,WCyGVS,cAlGb,SAAAA,IAAc,IAAA7B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACZ7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,QACK2B,YAAc9B,EAAK8B,YAAYtB,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAK+B,aAAe/B,EAAK+B,aAAavB,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAKgC,YAAchC,EAAKgC,YAAYxB,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEnBA,EAAKiC,MAAQ,CACXR,KAAM,GACNC,QAAS,GACTC,WAAY,EACZC,OAAQ,GACRJ,KAAM,GACNU,OAAQ,GACRC,OAAO,GAbGnC,mFAiBM,IAAAoC,EAAAjC,KAElBkC,MAAM,gDACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJJ,EAAKK,SAAS,CACZhB,KAAMe,EAAK,GAAGf,KACdC,QAASc,EAAK,GAAGd,QACjBC,WAAYa,EAAK,GAAGb,WACpBC,OAAQY,EAAK,GAAGZ,OAChBJ,KAAMgB,EAAK,GAAGhB,SAEfkB,MAAM,SAAAC,GAAG,OAAIjC,QAAQyB,MAAMQ,yCAItBC,GAAS,IAAAC,EAAA1C,KACnBO,QAAQC,IAAI,qBAAsBiC,GAClCP,MAAK,yCAAAS,OAA0CF,IAC9CN,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAEJK,EAAKJ,SAAS,CACZhB,KAAMe,EAAK,GAAGf,KACdC,QAASc,EAAK,GAAGd,QACjBC,WAAYa,EAAK,GAAGb,WACpBC,OAAQY,EAAK,GAAGZ,OAChBJ,KAAMgB,EAAK,GAAGhB,SAEfkB,MAAM,SAAAC,GAAG,OAAIjC,QAAQyB,MAAMQ,4CAIjB,IAAAI,EAAA5C,KACbkC,MAAK,yCAAAS,OAA0C3C,KAAK8B,MAAMC,SACvDI,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAEJO,EAAKN,SAAS,CACZhB,KAAMe,EAAK,GAAGf,KACdC,QAASc,EAAK,GAAGd,QACjBC,WAAYa,EAAK,GAAGb,WACpBC,OAAQY,EAAK,GAAGZ,OAChBJ,KAAMgB,EAAK,GAAGhB,KACdW,OAAO,MAERO,MAAM,SAAAC,GAEPjC,QAAQyB,MAAMQ,GACdI,EAAKN,SAAS,CACZN,OAAO,0CAMHa,GACVtC,QAAQC,IAAIqC,EAAEC,OAAOC,OACrB/C,KAAKsC,SAAS,CACZP,OAAQc,EAAEC,OAAOC,yCAKnB,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOC,SAAUjD,KAAK6B,cAClClB,EAAAC,EAAAC,cAACqC,EAAD,CAAQxC,QAASV,KAAK4B,cAAtB,YAKC5B,KAAK8B,MAAME,MACVrB,EAAAC,EAAAC,cAAA,sCACEF,EAAAC,EAAAC,cAACsC,EAAD,CAAM/B,KAAMpB,KAAK8B,gBA7FXb,aCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.7290d68a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Button extends React.Component {\n    constructor() {\n        super();\n        this.click = this.click.bind(this);\n    }\n\n    click() {\n        console.log('[Button] click')\n        // ici on indique à notre composant parent qu'il y eu un clique sur le bouton\n        this.props.onClick()\n    }\n\n    render() {\n        return (\n            <button onClick={this.click} className=\"btn btn-primary\">{this.props.children}</button>\n        )\n    }\n}\n\nexport default Button","import React from 'react';\n\nclass Card extends React.Component {\n\n    render() {\n        return (\n            <div className=\"card\">\n                <img className=\"card-img-top\" src={this.props.info.flag}></img>\n                <p> {this.props.info.name} </p>\n                <p> {this.props.info.capital} </p>\n                <p> {this.props.info.population} </p>\n                <p> {this.props.info.region} </p>\n\n            </div>\n        )\n    }\n}\n\nexport default Card","import React, { Component } from 'react';\nimport './App.css';\nimport './assets/bootstrap.min.css';\nimport './assets/main.css';\nimport Button from './components/Button';\nimport Card from './components/Card';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.buttonClick = this.buttonClick.bind(this);\n    this.buttonSearch = this.buttonSearch.bind(this);\n    this.inputChange = this.inputChange.bind(this);\n\n    this.state = {\n      name: '',\n      capital: '',\n      population: 0,\n      region: '',\n      flag: '',\n      search: '',\n      error: false\n    }\n  }\n\n  componentDidMount() {\n    // Pour l'initalisation des données\n    fetch('https://restcountries.eu/rest/v2/name/france')\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          name: json[0].name,\n          capital: json[0].capital,\n          population: json[0].population,\n          region: json[0].region,\n          flag: json[0].flag\n        })\n      }).catch(err => console.error(err));\n  }\n\n  // Le bouton cliqué renvoie un country different en paramètre\n  buttonClick(country) {\n    console.log('[app] buttonClick:', country)\n    fetch(`https://restcountries.eu/rest/v2/name/${country}`)\n    .then(res => res.json())\n    .then(json => {\n      // Ici je sais que le json est un array avec un élément, il faut donc que je récupère la valeur de json[0]\n      this.setState({\n        name: json[0].name,\n        capital: json[0].capital,\n        population: json[0].population,\n        region: json[0].region,\n        flag: json[0].flag\n      })\n    }).catch(err => console.error(err));\n  }\n\n  // faire un fetch sur countries avec la valeur du input qui est enregistré dans le state\n  buttonSearch() {\n    fetch(`https://restcountries.eu/rest/v2/name/${this.state.search}`)\n      .then(res => res.json())\n      .then(json => {\n        // code\n        this.setState({\n          name: json[0].name,\n          capital: json[0].capital,\n          population: json[0].population,\n          region: json[0].region,\n          flag: json[0].flag,\n          error: false\n        })\n      }).catch(err => {\n        // Si j'ai une erreur je rentre dans ce code\n        console.error(err)\n        this.setState({\n          error: true\n        })\n      });\n  }\n\n  // Récuperer la valeur de l'input\n  inputChange(e) {\n    console.log(e.target.value)\n    this.setState({\n      search: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={this.inputChange}></input>\n        <Button onClick={this.buttonSearch}> Search </Button>\n        {/* <Button onClick={() => this.buttonClick('france')}> France </Button>\n        <Button onClick={() => this.buttonClick('brazil')}> Brazil </Button>\n        <Button onClick={() => this.buttonClick('croatia')}> Croatia </Button> */}\n\n        {this.state.error ?\n          <h1> Le pays est introuvable</h1>\n          : <Card info={this.state}></Card>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}